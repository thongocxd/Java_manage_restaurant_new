package view;

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.and;
import static com.mongodb.client.model.Filters.eq;
import com.mongodb.client.model.UpdateOptions;
import javax.swing.SwingUtilities;
import javax.swing.ImageIcon;
import org.bson.Document;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Color;
import javax.swing.JOptionPane;
import java.awt.FlowLayout;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import org.bson.types.ObjectId;
import view.GoiMon;

/**
 *
 * @author kevin
 * @param <cmdAdj>
 * @param <cmdAdj>
 * @param <cmdAdj>
 * @param <cmdAdj>
 */
public class DatBan extends javax.swing.JFrame {

    public ObjectId idNV;

    private ObjectId idBill; // Khai báo idBill ở đây

    public ObjectId getIdBill() {
        return idBill;
    }
    // Add this line to declare the tablePanel variable
    private javax.swing.JPanel tablePanel;
    private Login loginForm;

    /**
     * Creates new form DatBan
     */
    public DatBan(ObjectId idNV) {
        this.idNV = idNV;
        initComponents();
        createTables();
        loginForm = new Login();
    }

    public DatBan() {
        initComponents();
        createTables();
        loginForm = new Login();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        lbTitle = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        canvas1 = new java.awt.Canvas();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setText("Menu");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 204, 255));
        jButton2.setText("Đặt Bàn");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 255, 204));
        jButton3.setText("Đăng Xuất");
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        lbTitle.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        lbTitle.setForeground(new java.awt.Color(108, 91, 123));
        lbTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(971, Short.MAX_VALUE)
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(339, Short.MAX_VALUE)
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(262, 262, 262))
        );

        jButton4.setBackground(new java.awt.Color(204, 255, 204));
        jButton4.setText("Quay Lại");
        jButton4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(40, 40, 40)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(lbTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdAdjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAdjActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdAdjActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Login loginform = new Login();
        loginform.setVisible(true);
        this.dispose();           // TODO add your handling code here:
        loginForm.setVisible(true);
        this.dispose();  // Close the current form
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:    createTables();
        createTables();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        createTables();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        Interface interface1 = new Interface(idNV);
        interface1.setVisible(true);
        this.dispose();           // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void createNewBill(int tableNumber) {
        try {
            MongoClient mongoClient = MongoClients.create("mongodb+srv://phucpro2104:phuc123@cluster0.7834cva.mongodb.net/");
            MongoDatabase database = mongoClient.getDatabase("restaurant");
            MongoCollection<Document> billCollection = database.getCollection("bill");

            // Kiểm tra xem có hóa đơn nào chưa thanh toán cho bàn này không
            Document existingBill = billCollection.find(
                    and(eq("table_number", tableNumber), eq("payment_status", "unpaid"))
            ).first();

            ObjectId idBill;
            String billId;

            if (existingBill != null) {
                // Lấy ID của hóa đơn hiện tại
                idBill = existingBill.getObjectId("idBill");
                billId = idBill.toString();
                System.out.println("An unpaid bill already exists for table number: " + tableNumber + ". Bill ID: " + billId);
                // Có thể thêm logic cập nhật hóa đơn ở đây nếu cần
            } else {
                // Tạo hóa đơn mới
                idBill = new ObjectId();
                Document newBill = new Document("table_number", tableNumber)
                        .append("idBill", idBill)
                        .append("bill", new Document("bill_date", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                                .append("total_price", null))
                        .append("order", Arrays.asList())
                        .append("payment_status", "unpaid");
                billCollection.insertOne(newBill);

                billId = idBill.toString();
                System.out.println("New bill created for table number: " + tableNumber + ". Bill ID: " + billId);
            }

            this.idBill = idBill;

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error creating new bill. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean hasUnpaidBill(int tableNumber) {
        // Kết nối với cơ sở dữ liệu và kiểm tra hóa đơn
        // Giả sử bạn có một collection hóa đơn với trường "table_number" và "payment_status"
        try {
            MongoClient mongoClient = MongoClients.create("mongodb+srv://phucpro2104:phuc123@cluster0.7834cva.mongodb.net/");
            MongoDatabase database = mongoClient.getDatabase("restaurant");
            MongoCollection<Document> billCollection = database.getCollection("bill");

            Document unpaidBill = billCollection.find(
                    and(eq("table_number", tableNumber), eq("payment_status", "unpaid"))
            ).first();

            return unpaidBill != null;
        } catch (Exception e) {
            e.printStackTrace();
            // Xử lý lỗi
        }
        return false;
    }

    public void createTables() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                try {
                    MongoClient mongoClient = MongoClients.create("mongodb+srv://phucpro2104:phuc123@cluster0.7834cva.mongodb.net/");
                    MongoDatabase database = mongoClient.getDatabase("restaurant");
                    MongoCollection<Document> collection = database.getCollection("table");

                    tablePanel = new JPanel(new GridLayout(3, 4)); // Adjust grid layout as needed
                    tablePanel.setBounds(0, 0, 1050, 590);
                    tablePanel.setBackground(new Color(204, 255, 255));

                    for (Document document : collection.find()) {
                        Integer tableNumber = document.getInteger("table_number");
                        String tableName = document.getString("table_name");
                        String trangThai = document.getString("trangthai");

                        // Debugging print
                        System.out.println("Table Number: " + tableNumber + ", Table Name: " + tableName);

                        JLabel status = new JLabel(tableName + " - Tình trạng: " + trangThai);
                        status.setHorizontalAlignment(JLabel.CENTER); // Canh ngang giữa
                        status.setVerticalAlignment(JLabel.CENTER);
                        JPanel tablePanelItem = new JPanel(new BorderLayout());
                        tablePanelItem.setBackground(new Color(216, 250, 216));

                        // Ensure the imagePath is correctly retrieved and valid
                        String imagePath = document.getString("imagePath");
                        ImageIcon imageIcon = new ImageIcon(imagePath);
                        JLabel imageLabel = new JLabel(imageIcon);
                        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/caiban/images.jpg")));

                        // Create a panel for buttons and add it to the SOUTH position
                        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));

                        JButton actionButton = new JButton();
                        buttonPanel.add(actionButton);
                        buttonPanel.setBackground(new Color(216, 250, 216));

                        tablePanelItem.add(buttonPanel, BorderLayout.SOUTH);

                        // Create buttons based on the table status
                        if ("Ban Trong".equals(trangThai)) {
                            actionButton.setText("Đặt Bàn");
//                        actionButton.setBackground(new Color(204,255,255));
                            actionButton.addActionListener(e -> {
                                // Display a confirmation dialog
                                int result = JOptionPane.showConfirmDialog(null, "Xác nhận đặt bàn cho bàn số " + tableNumber + "?", "Xác Nhận", JOptionPane.YES_NO_OPTION);

                                if (result == JOptionPane.YES_OPTION) {
                                    // Update the table status in the database (assuming you have a method to update the database)
                                    updateTableStatus(tableNumber, "Ban Da Dat");

                                    // Change the button text to "Gọi Món"
                                    actionButton.setText("Gọi Món");

                                    // Add "Hủy Bàn" button
                                    JButton cancelButton = new JButton("Hủy Bàn");
                                    cancelButton.addActionListener(cancelEvent -> {
                                        // Confirm cancellation with a dialog
                                        int cancelResult = JOptionPane.showConfirmDialog(
                                                null,
                                                "Bạn có chắc chắn muốn hủy bàn số " + tableNumber + " không?",
                                                "Xác Nhận Hủy Bàn",
                                                JOptionPane.YES_NO_OPTION
                                        );

                                        // Check if the user confirmed the cancellation
                                        if (cancelResult == JOptionPane.YES_OPTION) {
                                            updateTableStatus(tableNumber, "Ban Trong");
                                            actionButton.setText("Đặt Bàn");

                                            // Remove "Gọi Món" and "Hủy Bàn" buttons
                                            buttonPanel.removeAll();
                                            buttonPanel.add(actionButton);

                                            // Repaint the panel
                                            tablePanelItem.revalidate();
                                            tablePanelItem.repaint();
                                        }
                                    });

                                    // Add "Gọi Món" button
                                    JButton orderButton = new JButton("Gọi Món");
                                    orderButton.addActionListener(orderEvent -> {
                                        createNewBill(tableNumber);
                                        // Add code to handle the action when the "Gọi Món" button is clicked
                                        System.out.println("Gọi Món clicked for table number: " + tableNumber);
                                        openGoiMon(tableNumber, idNV);
                                    });

                                    // Add buttons to the buttonPanel   
                                    buttonPanel.removeAll();
                                    buttonPanel.add(orderButton);
                                    buttonPanel.add(cancelButton);

                                    // Repaint the panel
                                    tablePanelItem.revalidate();
                                    tablePanelItem.repaint();
                                }
                            });
                        } else if ("Ban Da Dat".equals(trangThai)) {
                            actionButton.setText("Gọi Món");
                            actionButton.addActionListener(orderEvent -> {
                                createNewBill(tableNumber);
                                // Add code to handle the action when the "Gọi Món" button is clicked
                                System.out.println("Gọi Món clicked for table number: " + tableNumber);
                                openGoiMon(tableNumber, idNV);
                            });
                            // Add "Hủy Bàn" button
                            JButton cancelButton = new JButton("Hủy Bàn");
                            if (!hasUnpaidBill(tableNumber)) {
                                cancelButton.addActionListener(cancelEvent -> {
                                    int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn hủy bàn số " + tableNumber + "?", "Xác Nhận Hủy Bàn", JOptionPane.YES_NO_OPTION);
                                    if (confirm == JOptionPane.YES_OPTION) {
                                        // Add code to handle the action when the "Hủy Bàn" button is clicked
                                        updateTableStatus(tableNumber, "Ban Trong");
                                        actionButton.setText("Đặt Bàn");

                                        // Remove "Gọi Món" and "Hủy Bàn" buttons
                                        buttonPanel.removeAll();

                                        // Add "Đặt Bàn" button
                                        actionButton.addActionListener(e -> {
                                            // Display a confirmation dialog
                                            int result = JOptionPane.showConfirmDialog(null, "Xác nhận đặt bàn cho bàn số " + tableNumber + "?", "Xác Nhận", JOptionPane.YES_NO_OPTION);

                                            if (result == JOptionPane.YES_OPTION) {
                                                // Update the table status in the database (assuming you have a method to update the database)
                                                updateTableStatus(tableNumber, "Ban Da Dat");

                                                // Change the button text to "Gọi Món"
                                                actionButton.setText("Gọi Món");

                                                // Add "Hủy Bàn" button
                                                JButton newCancelButton = new JButton("Hủy Bàn");
                                                newCancelButton.addActionListener(newCancelEvent -> {
                                                    updateTableStatus(tableNumber, "Ban Trong");
                                                    actionButton.setText("Đặt Bàn");
                                                    // Remove "Gọi Món" and "Hủy Bàn" buttons
                                                    buttonPanel.removeAll();
                                                    // Add "Đặt Bàn" button
                                                    buttonPanel.add(actionButton);
                                                    // Repaint the panel
                                                    tablePanelItem.revalidate();
                                                    tablePanelItem.repaint();
                                                });

                                                // Add "Gọi Món" button
                                                JButton newOrderButton = new JButton("Gọi Món");
                                                newOrderButton.addActionListener(newOrderEvent -> {
                                                    createNewBill(tableNumber);
                                                    //                    int createResult = JOptionPane.showConfirmDialog(null, "Xác nhận gọi món cho bàn số " + tableNumber + "? (Không thể hủy bàn sau khi gọi mon)", "Xác Nhận", JOptionPane.YES_NO_OPTION);
                                                    // Add code to handle the action when the "Gọi Món" button is clicked
                                                    System.out.println("Gọi Món clicked for table number: " + tableNumber);
                                                    openGoiMon(tableNumber, idNV);
                                                    dispose();  // Close the current form
                                                });

                                                // Add buttons to the buttonPanel   
                                                buttonPanel.removeAll();
                                                buttonPanel.add(newOrderButton);
                                                buttonPanel.add(newCancelButton);

                                                // Repaint the panel
                                                tablePanelItem.revalidate();
                                                tablePanelItem.repaint();
                                            }
                                        });

                                        // Add the actionButton to the buttonPanel
                                        buttonPanel.add(actionButton);

                                        // Repaint the panel    
                                        tablePanelItem.revalidate();
                                        tablePanelItem.repaint();
                                    }
                                });
                                buttonPanel.add(cancelButton);
                            } else {
                                // Có thể hiển thị thông báo hoặc làm mờ nút nếu có hóa đơn chưa thanh toán
                                cancelButton.setEnabled(false);
                                buttonPanel.add(cancelButton);
                            }
                            // Add buttons to the buttonPanel
                            buttonPanel.setBackground(new Color(216, 250, 216));
                            buttonPanel.add(actionButton);
                            buttonPanel.add(cancelButton);

                            // Repaint the panel
                            tablePanelItem.revalidate();
                            tablePanelItem.repaint();
                        }

                        // Set the foreground color to make the text visible on the background
                        status.setForeground(Color.BLACK);

                        // Set other properties, e.g., opaque to make the background color visible
                        status.setOpaque(true);
                        status.setBackground(new Color(216, 250, 216));

                        tablePanelItem.add(status, BorderLayout.NORTH);
                        tablePanelItem.add(imageLabel, BorderLayout.CENTER);

                        tablePanel.add(tablePanelItem);
                    }
                    tablePanel.setBackground(new Color(216, 250, 216));
                    jPanel1.add(tablePanel);
                    jPanel1.revalidate();
                    jPanel1.repaint();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    private void updateTableStatus(int tableNumber, String newStatus) {
        try {
            // Connect to MongoDB
            MongoClient mongoClient = MongoClients.create("mongodb+srv://phucpro2104:phuc123@cluster0.7834cva.mongodb.net/");
            MongoDatabase database = mongoClient.getDatabase("restaurant");
            MongoCollection<Document> collection = database.getCollection("table");

            // Prepare the filter based on the table number
            Document filter = new Document("table_number", tableNumber);

            // Prepare the update with the new status
            Document update = new Document("$set", new Document("trangthai", newStatus));

            // Set the update options
            UpdateOptions options = new UpdateOptions().upsert(false);

            // Update the document in the collection
            collection.updateOne(filter, update, options);

            // Print a message to the console for debugging
            System.out.println("Table status updated successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating table status. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void openGoiMon(int tableNumber, ObjectId idNV) {
        GoiMon goiMonFrame = new GoiMon(tableNumber, this.idBill, this.idNV);
        goiMonFrame.setVisible(true);
        this.dispose(); // hoặc logic khác theo dòng chảy ứng dụng của bạn
    }

    private void tableButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Handle table button click event if needed
        // You can add specific actions when a table button is clicked
        // For now, I'll just print a message to the console
        JButton clickedButton = (JButton) evt.getSource();
        System.out.println("Table clicked: " + clickedButton.getText());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatBan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatBan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatBan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatBan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatBan().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lbTitle;
    // End of variables declaration//GEN-END:variables
}
